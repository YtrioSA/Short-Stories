
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model gender
 * 
 */
export type gender = $Result.DefaultSelection<Prisma.$genderPayload>
/**
 * Model drama
 * 
 */
export type drama = $Result.DefaultSelection<Prisma.$dramaPayload>
/**
 * Model tragedy
 * 
 */
export type tragedy = $Result.DefaultSelection<Prisma.$tragedyPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Genders
 * const genders = await prisma.gender.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Genders
   * const genders = await prisma.gender.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.gender`: Exposes CRUD operations for the **gender** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genders
    * const genders = await prisma.gender.findMany()
    * ```
    */
  get gender(): Prisma.genderDelegate<ExtArgs>;

  /**
   * `prisma.drama`: Exposes CRUD operations for the **drama** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dramas
    * const dramas = await prisma.drama.findMany()
    * ```
    */
  get drama(): Prisma.dramaDelegate<ExtArgs>;

  /**
   * `prisma.tragedy`: Exposes CRUD operations for the **tragedy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tragedies
    * const tragedies = await prisma.tragedy.findMany()
    * ```
    */
  get tragedy(): Prisma.tragedyDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    gender: 'gender',
    drama: 'drama',
    tragedy: 'tragedy',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'gender' | 'drama' | 'tragedy' | 'user'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      gender: {
        payload: Prisma.$genderPayload<ExtArgs>
        fields: Prisma.genderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.genderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.genderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>
          }
          findFirst: {
            args: Prisma.genderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.genderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>
          }
          findMany: {
            args: Prisma.genderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>[]
          }
          create: {
            args: Prisma.genderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>
          }
          createMany: {
            args: Prisma.genderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.genderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>
          }
          update: {
            args: Prisma.genderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>
          }
          deleteMany: {
            args: Prisma.genderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.genderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.genderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$genderPayload>
          }
          aggregate: {
            args: Prisma.GenderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGender>
          }
          groupBy: {
            args: Prisma.genderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GenderGroupByOutputType>[]
          }
          count: {
            args: Prisma.genderCountArgs<ExtArgs>,
            result: $Utils.Optional<GenderCountAggregateOutputType> | number
          }
        }
      }
      drama: {
        payload: Prisma.$dramaPayload<ExtArgs>
        fields: Prisma.dramaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dramaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dramaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>
          }
          findFirst: {
            args: Prisma.dramaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dramaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>
          }
          findMany: {
            args: Prisma.dramaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>[]
          }
          create: {
            args: Prisma.dramaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>
          }
          createMany: {
            args: Prisma.dramaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.dramaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>
          }
          update: {
            args: Prisma.dramaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>
          }
          deleteMany: {
            args: Prisma.dramaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.dramaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.dramaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dramaPayload>
          }
          aggregate: {
            args: Prisma.DramaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDrama>
          }
          groupBy: {
            args: Prisma.dramaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DramaGroupByOutputType>[]
          }
          count: {
            args: Prisma.dramaCountArgs<ExtArgs>,
            result: $Utils.Optional<DramaCountAggregateOutputType> | number
          }
        }
      }
      tragedy: {
        payload: Prisma.$tragedyPayload<ExtArgs>
        fields: Prisma.tragedyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tragedyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tragedyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>
          }
          findFirst: {
            args: Prisma.tragedyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tragedyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>
          }
          findMany: {
            args: Prisma.tragedyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>[]
          }
          create: {
            args: Prisma.tragedyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>
          }
          createMany: {
            args: Prisma.tragedyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tragedyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>
          }
          update: {
            args: Prisma.tragedyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>
          }
          deleteMany: {
            args: Prisma.tragedyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tragedyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tragedyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tragedyPayload>
          }
          aggregate: {
            args: Prisma.TragedyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTragedy>
          }
          groupBy: {
            args: Prisma.tragedyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TragedyGroupByOutputType>[]
          }
          count: {
            args: Prisma.tragedyCountArgs<ExtArgs>,
            result: $Utils.Optional<TragedyCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model gender
   */

  export type AggregateGender = {
    _count: GenderCountAggregateOutputType | null
    _avg: GenderAvgAggregateOutputType | null
    _sum: GenderSumAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  export type GenderAvgAggregateOutputType = {
    id: number | null
  }

  export type GenderSumAggregateOutputType = {
    id: number | null
  }

  export type GenderMinAggregateOutputType = {
    id: number | null
    cover: string | null
    icon: string | null
    name: string | null
    desc: string | null
    link: string | null
    link_name: string | null
  }

  export type GenderMaxAggregateOutputType = {
    id: number | null
    cover: string | null
    icon: string | null
    name: string | null
    desc: string | null
    link: string | null
    link_name: string | null
  }

  export type GenderCountAggregateOutputType = {
    id: number
    cover: number
    icon: number
    name: number
    desc: number
    link: number
    link_name: number
    _all: number
  }


  export type GenderAvgAggregateInputType = {
    id?: true
  }

  export type GenderSumAggregateInputType = {
    id?: true
  }

  export type GenderMinAggregateInputType = {
    id?: true
    cover?: true
    icon?: true
    name?: true
    desc?: true
    link?: true
    link_name?: true
  }

  export type GenderMaxAggregateInputType = {
    id?: true
    cover?: true
    icon?: true
    name?: true
    desc?: true
    link?: true
    link_name?: true
  }

  export type GenderCountAggregateInputType = {
    id?: true
    cover?: true
    icon?: true
    name?: true
    desc?: true
    link?: true
    link_name?: true
    _all?: true
  }

  export type GenderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gender to aggregate.
     */
    where?: genderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genders to fetch.
     */
    orderBy?: genderOrderByWithRelationInput | genderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: genderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned genders
    **/
    _count?: true | GenderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenderMaxAggregateInputType
  }

  export type GetGenderAggregateType<T extends GenderAggregateArgs> = {
        [P in keyof T & keyof AggregateGender]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGender[P]>
      : GetScalarType<T[P], AggregateGender[P]>
  }




  export type genderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: genderWhereInput
    orderBy?: genderOrderByWithAggregationInput | genderOrderByWithAggregationInput[]
    by: GenderScalarFieldEnum[] | GenderScalarFieldEnum
    having?: genderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenderCountAggregateInputType | true
    _avg?: GenderAvgAggregateInputType
    _sum?: GenderSumAggregateInputType
    _min?: GenderMinAggregateInputType
    _max?: GenderMaxAggregateInputType
  }

  export type GenderGroupByOutputType = {
    id: number
    cover: string
    icon: string
    name: string
    desc: string
    link: string
    link_name: string
    _count: GenderCountAggregateOutputType | null
    _avg: GenderAvgAggregateOutputType | null
    _sum: GenderSumAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  type GetGenderGroupByPayload<T extends genderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenderGroupByOutputType[P]>
            : GetScalarType<T[P], GenderGroupByOutputType[P]>
        }
      >
    >


  export type genderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cover?: boolean
    icon?: boolean
    name?: boolean
    desc?: boolean
    link?: boolean
    link_name?: boolean
  }, ExtArgs["result"]["gender"]>

  export type genderSelectScalar = {
    id?: boolean
    cover?: boolean
    icon?: boolean
    name?: boolean
    desc?: boolean
    link?: boolean
    link_name?: boolean
  }


  export type $genderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "gender"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cover: string
      icon: string
      name: string
      desc: string
      link: string
      link_name: string
    }, ExtArgs["result"]["gender"]>
    composites: {}
  }


  type genderGetPayload<S extends boolean | null | undefined | genderDefaultArgs> = $Result.GetResult<Prisma.$genderPayload, S>

  type genderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<genderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GenderCountAggregateInputType | true
    }

  export interface genderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gender'], meta: { name: 'gender' } }
    /**
     * Find zero or one Gender that matches the filter.
     * @param {genderFindUniqueArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends genderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, genderFindUniqueArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Gender that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {genderFindUniqueOrThrowArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends genderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, genderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Gender that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genderFindFirstArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends genderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, genderFindFirstArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Gender that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genderFindFirstOrThrowArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends genderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, genderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Genders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genders
     * const genders = await prisma.gender.findMany()
     * 
     * // Get first 10 Genders
     * const genders = await prisma.gender.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genderWithIdOnly = await prisma.gender.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends genderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, genderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Gender.
     * @param {genderCreateArgs} args - Arguments to create a Gender.
     * @example
     * // Create one Gender
     * const Gender = await prisma.gender.create({
     *   data: {
     *     // ... data to create a Gender
     *   }
     * })
     * 
    **/
    create<T extends genderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, genderCreateArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Genders.
     *     @param {genderCreateManyArgs} args - Arguments to create many Genders.
     *     @example
     *     // Create many Genders
     *     const gender = await prisma.gender.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends genderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, genderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gender.
     * @param {genderDeleteArgs} args - Arguments to delete one Gender.
     * @example
     * // Delete one Gender
     * const Gender = await prisma.gender.delete({
     *   where: {
     *     // ... filter to delete one Gender
     *   }
     * })
     * 
    **/
    delete<T extends genderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, genderDeleteArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Gender.
     * @param {genderUpdateArgs} args - Arguments to update one Gender.
     * @example
     * // Update one Gender
     * const gender = await prisma.gender.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends genderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, genderUpdateArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Genders.
     * @param {genderDeleteManyArgs} args - Arguments to filter Genders to delete.
     * @example
     * // Delete a few Genders
     * const { count } = await prisma.gender.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends genderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, genderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genders
     * const gender = await prisma.gender.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends genderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, genderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gender.
     * @param {genderUpsertArgs} args - Arguments to update or create a Gender.
     * @example
     * // Update or create a Gender
     * const gender = await prisma.gender.upsert({
     *   create: {
     *     // ... data to create a Gender
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gender we want to update
     *   }
     * })
    **/
    upsert<T extends genderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, genderUpsertArgs<ExtArgs>>
    ): Prisma__genderClient<$Result.GetResult<Prisma.$genderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genderCountArgs} args - Arguments to filter Genders to count.
     * @example
     * // Count the number of Genders
     * const count = await prisma.gender.count({
     *   where: {
     *     // ... the filter for the Genders we want to count
     *   }
     * })
    **/
    count<T extends genderCountArgs>(
      args?: Subset<T, genderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenderAggregateArgs>(args: Subset<T, GenderAggregateArgs>): Prisma.PrismaPromise<GetGenderAggregateType<T>>

    /**
     * Group by Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends genderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: genderGroupByArgs['orderBy'] }
        : { orderBy?: genderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, genderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the gender model
   */
  readonly fields: genderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for gender.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__genderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the gender model
   */ 
  interface genderFieldRefs {
    readonly id: FieldRef<"gender", 'Int'>
    readonly cover: FieldRef<"gender", 'String'>
    readonly icon: FieldRef<"gender", 'String'>
    readonly name: FieldRef<"gender", 'String'>
    readonly desc: FieldRef<"gender", 'String'>
    readonly link: FieldRef<"gender", 'String'>
    readonly link_name: FieldRef<"gender", 'String'>
  }
    

  // Custom InputTypes

  /**
   * gender findUnique
   */
  export type genderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * Filter, which gender to fetch.
     */
    where: genderWhereUniqueInput
  }


  /**
   * gender findUniqueOrThrow
   */
  export type genderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * Filter, which gender to fetch.
     */
    where: genderWhereUniqueInput
  }


  /**
   * gender findFirst
   */
  export type genderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * Filter, which gender to fetch.
     */
    where?: genderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genders to fetch.
     */
    orderBy?: genderOrderByWithRelationInput | genderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for genders.
     */
    cursor?: genderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of genders.
     */
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }


  /**
   * gender findFirstOrThrow
   */
  export type genderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * Filter, which gender to fetch.
     */
    where?: genderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genders to fetch.
     */
    orderBy?: genderOrderByWithRelationInput | genderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for genders.
     */
    cursor?: genderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of genders.
     */
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }


  /**
   * gender findMany
   */
  export type genderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * Filter, which genders to fetch.
     */
    where?: genderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genders to fetch.
     */
    orderBy?: genderOrderByWithRelationInput | genderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing genders.
     */
    cursor?: genderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genders.
     */
    skip?: number
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }


  /**
   * gender create
   */
  export type genderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * The data needed to create a gender.
     */
    data: XOR<genderCreateInput, genderUncheckedCreateInput>
  }


  /**
   * gender createMany
   */
  export type genderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many genders.
     */
    data: genderCreateManyInput | genderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * gender update
   */
  export type genderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * The data needed to update a gender.
     */
    data: XOR<genderUpdateInput, genderUncheckedUpdateInput>
    /**
     * Choose, which gender to update.
     */
    where: genderWhereUniqueInput
  }


  /**
   * gender updateMany
   */
  export type genderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update genders.
     */
    data: XOR<genderUpdateManyMutationInput, genderUncheckedUpdateManyInput>
    /**
     * Filter which genders to update
     */
    where?: genderWhereInput
  }


  /**
   * gender upsert
   */
  export type genderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * The filter to search for the gender to update in case it exists.
     */
    where: genderWhereUniqueInput
    /**
     * In case the gender found by the `where` argument doesn't exist, create a new gender with this data.
     */
    create: XOR<genderCreateInput, genderUncheckedCreateInput>
    /**
     * In case the gender was found with the provided `where` argument, update it with this data.
     */
    update: XOR<genderUpdateInput, genderUncheckedUpdateInput>
  }


  /**
   * gender delete
   */
  export type genderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
    /**
     * Filter which gender to delete.
     */
    where: genderWhereUniqueInput
  }


  /**
   * gender deleteMany
   */
  export type genderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which genders to delete
     */
    where?: genderWhereInput
  }


  /**
   * gender without action
   */
  export type genderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gender
     */
    select?: genderSelect<ExtArgs> | null
  }



  /**
   * Model drama
   */

  export type AggregateDrama = {
    _count: DramaCountAggregateOutputType | null
    _avg: DramaAvgAggregateOutputType | null
    _sum: DramaSumAggregateOutputType | null
    _min: DramaMinAggregateOutputType | null
    _max: DramaMaxAggregateOutputType | null
  }

  export type DramaAvgAggregateOutputType = {
    id: number | null
  }

  export type DramaSumAggregateOutputType = {
    id: number | null
  }

  export type DramaMinAggregateOutputType = {
    id: number | null
    date: Date | null
    cover: string | null
    name: string | null
    summary: string | null
    gender: string | null
    link: string | null
    link_name: string | null
  }

  export type DramaMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    cover: string | null
    name: string | null
    summary: string | null
    gender: string | null
    link: string | null
    link_name: string | null
  }

  export type DramaCountAggregateOutputType = {
    id: number
    date: number
    cover: number
    name: number
    summary: number
    gender: number
    link: number
    link_name: number
    _all: number
  }


  export type DramaAvgAggregateInputType = {
    id?: true
  }

  export type DramaSumAggregateInputType = {
    id?: true
  }

  export type DramaMinAggregateInputType = {
    id?: true
    date?: true
    cover?: true
    name?: true
    summary?: true
    gender?: true
    link?: true
    link_name?: true
  }

  export type DramaMaxAggregateInputType = {
    id?: true
    date?: true
    cover?: true
    name?: true
    summary?: true
    gender?: true
    link?: true
    link_name?: true
  }

  export type DramaCountAggregateInputType = {
    id?: true
    date?: true
    cover?: true
    name?: true
    summary?: true
    gender?: true
    link?: true
    link_name?: true
    _all?: true
  }

  export type DramaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which drama to aggregate.
     */
    where?: dramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dramas to fetch.
     */
    orderBy?: dramaOrderByWithRelationInput | dramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dramas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dramas
    **/
    _count?: true | DramaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DramaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DramaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DramaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DramaMaxAggregateInputType
  }

  export type GetDramaAggregateType<T extends DramaAggregateArgs> = {
        [P in keyof T & keyof AggregateDrama]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrama[P]>
      : GetScalarType<T[P], AggregateDrama[P]>
  }




  export type dramaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dramaWhereInput
    orderBy?: dramaOrderByWithAggregationInput | dramaOrderByWithAggregationInput[]
    by: DramaScalarFieldEnum[] | DramaScalarFieldEnum
    having?: dramaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DramaCountAggregateInputType | true
    _avg?: DramaAvgAggregateInputType
    _sum?: DramaSumAggregateInputType
    _min?: DramaMinAggregateInputType
    _max?: DramaMaxAggregateInputType
  }

  export type DramaGroupByOutputType = {
    id: number
    date: Date | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
    _count: DramaCountAggregateOutputType | null
    _avg: DramaAvgAggregateOutputType | null
    _sum: DramaSumAggregateOutputType | null
    _min: DramaMinAggregateOutputType | null
    _max: DramaMaxAggregateOutputType | null
  }

  type GetDramaGroupByPayload<T extends dramaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DramaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DramaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DramaGroupByOutputType[P]>
            : GetScalarType<T[P], DramaGroupByOutputType[P]>
        }
      >
    >


  export type dramaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    cover?: boolean
    name?: boolean
    summary?: boolean
    gender?: boolean
    link?: boolean
    link_name?: boolean
  }, ExtArgs["result"]["drama"]>

  export type dramaSelectScalar = {
    id?: boolean
    date?: boolean
    cover?: boolean
    name?: boolean
    summary?: boolean
    gender?: boolean
    link?: boolean
    link_name?: boolean
  }


  export type $dramaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "drama"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date | null
      cover: string
      name: string
      summary: string
      gender: string
      link: string
      link_name: string
    }, ExtArgs["result"]["drama"]>
    composites: {}
  }


  type dramaGetPayload<S extends boolean | null | undefined | dramaDefaultArgs> = $Result.GetResult<Prisma.$dramaPayload, S>

  type dramaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<dramaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DramaCountAggregateInputType | true
    }

  export interface dramaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['drama'], meta: { name: 'drama' } }
    /**
     * Find zero or one Drama that matches the filter.
     * @param {dramaFindUniqueArgs} args - Arguments to find a Drama
     * @example
     * // Get one Drama
     * const drama = await prisma.drama.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dramaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, dramaFindUniqueArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Drama that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dramaFindUniqueOrThrowArgs} args - Arguments to find a Drama
     * @example
     * // Get one Drama
     * const drama = await prisma.drama.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dramaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dramaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Drama that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dramaFindFirstArgs} args - Arguments to find a Drama
     * @example
     * // Get one Drama
     * const drama = await prisma.drama.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dramaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, dramaFindFirstArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Drama that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dramaFindFirstOrThrowArgs} args - Arguments to find a Drama
     * @example
     * // Get one Drama
     * const drama = await prisma.drama.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dramaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dramaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dramas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dramaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dramas
     * const dramas = await prisma.drama.findMany()
     * 
     * // Get first 10 Dramas
     * const dramas = await prisma.drama.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dramaWithIdOnly = await prisma.drama.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dramaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dramaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Drama.
     * @param {dramaCreateArgs} args - Arguments to create a Drama.
     * @example
     * // Create one Drama
     * const Drama = await prisma.drama.create({
     *   data: {
     *     // ... data to create a Drama
     *   }
     * })
     * 
    **/
    create<T extends dramaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, dramaCreateArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dramas.
     *     @param {dramaCreateManyArgs} args - Arguments to create many Dramas.
     *     @example
     *     // Create many Dramas
     *     const drama = await prisma.drama.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dramaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dramaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Drama.
     * @param {dramaDeleteArgs} args - Arguments to delete one Drama.
     * @example
     * // Delete one Drama
     * const Drama = await prisma.drama.delete({
     *   where: {
     *     // ... filter to delete one Drama
     *   }
     * })
     * 
    **/
    delete<T extends dramaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, dramaDeleteArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Drama.
     * @param {dramaUpdateArgs} args - Arguments to update one Drama.
     * @example
     * // Update one Drama
     * const drama = await prisma.drama.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dramaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, dramaUpdateArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dramas.
     * @param {dramaDeleteManyArgs} args - Arguments to filter Dramas to delete.
     * @example
     * // Delete a few Dramas
     * const { count } = await prisma.drama.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dramaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dramaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dramas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dramaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dramas
     * const drama = await prisma.drama.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dramaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, dramaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Drama.
     * @param {dramaUpsertArgs} args - Arguments to update or create a Drama.
     * @example
     * // Update or create a Drama
     * const drama = await prisma.drama.upsert({
     *   create: {
     *     // ... data to create a Drama
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Drama we want to update
     *   }
     * })
    **/
    upsert<T extends dramaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, dramaUpsertArgs<ExtArgs>>
    ): Prisma__dramaClient<$Result.GetResult<Prisma.$dramaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Dramas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dramaCountArgs} args - Arguments to filter Dramas to count.
     * @example
     * // Count the number of Dramas
     * const count = await prisma.drama.count({
     *   where: {
     *     // ... the filter for the Dramas we want to count
     *   }
     * })
    **/
    count<T extends dramaCountArgs>(
      args?: Subset<T, dramaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DramaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Drama.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DramaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DramaAggregateArgs>(args: Subset<T, DramaAggregateArgs>): Prisma.PrismaPromise<GetDramaAggregateType<T>>

    /**
     * Group by Drama.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dramaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dramaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dramaGroupByArgs['orderBy'] }
        : { orderBy?: dramaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dramaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDramaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the drama model
   */
  readonly fields: dramaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for drama.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dramaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the drama model
   */ 
  interface dramaFieldRefs {
    readonly id: FieldRef<"drama", 'Int'>
    readonly date: FieldRef<"drama", 'DateTime'>
    readonly cover: FieldRef<"drama", 'String'>
    readonly name: FieldRef<"drama", 'String'>
    readonly summary: FieldRef<"drama", 'String'>
    readonly gender: FieldRef<"drama", 'String'>
    readonly link: FieldRef<"drama", 'String'>
    readonly link_name: FieldRef<"drama", 'String'>
  }
    

  // Custom InputTypes

  /**
   * drama findUnique
   */
  export type dramaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * Filter, which drama to fetch.
     */
    where: dramaWhereUniqueInput
  }


  /**
   * drama findUniqueOrThrow
   */
  export type dramaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * Filter, which drama to fetch.
     */
    where: dramaWhereUniqueInput
  }


  /**
   * drama findFirst
   */
  export type dramaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * Filter, which drama to fetch.
     */
    where?: dramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dramas to fetch.
     */
    orderBy?: dramaOrderByWithRelationInput | dramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dramas.
     */
    cursor?: dramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dramas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dramas.
     */
    distinct?: DramaScalarFieldEnum | DramaScalarFieldEnum[]
  }


  /**
   * drama findFirstOrThrow
   */
  export type dramaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * Filter, which drama to fetch.
     */
    where?: dramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dramas to fetch.
     */
    orderBy?: dramaOrderByWithRelationInput | dramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dramas.
     */
    cursor?: dramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dramas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dramas.
     */
    distinct?: DramaScalarFieldEnum | DramaScalarFieldEnum[]
  }


  /**
   * drama findMany
   */
  export type dramaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * Filter, which dramas to fetch.
     */
    where?: dramaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dramas to fetch.
     */
    orderBy?: dramaOrderByWithRelationInput | dramaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dramas.
     */
    cursor?: dramaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dramas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dramas.
     */
    skip?: number
    distinct?: DramaScalarFieldEnum | DramaScalarFieldEnum[]
  }


  /**
   * drama create
   */
  export type dramaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * The data needed to create a drama.
     */
    data: XOR<dramaCreateInput, dramaUncheckedCreateInput>
  }


  /**
   * drama createMany
   */
  export type dramaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dramas.
     */
    data: dramaCreateManyInput | dramaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * drama update
   */
  export type dramaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * The data needed to update a drama.
     */
    data: XOR<dramaUpdateInput, dramaUncheckedUpdateInput>
    /**
     * Choose, which drama to update.
     */
    where: dramaWhereUniqueInput
  }


  /**
   * drama updateMany
   */
  export type dramaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dramas.
     */
    data: XOR<dramaUpdateManyMutationInput, dramaUncheckedUpdateManyInput>
    /**
     * Filter which dramas to update
     */
    where?: dramaWhereInput
  }


  /**
   * drama upsert
   */
  export type dramaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * The filter to search for the drama to update in case it exists.
     */
    where: dramaWhereUniqueInput
    /**
     * In case the drama found by the `where` argument doesn't exist, create a new drama with this data.
     */
    create: XOR<dramaCreateInput, dramaUncheckedCreateInput>
    /**
     * In case the drama was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dramaUpdateInput, dramaUncheckedUpdateInput>
  }


  /**
   * drama delete
   */
  export type dramaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
    /**
     * Filter which drama to delete.
     */
    where: dramaWhereUniqueInput
  }


  /**
   * drama deleteMany
   */
  export type dramaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dramas to delete
     */
    where?: dramaWhereInput
  }


  /**
   * drama without action
   */
  export type dramaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drama
     */
    select?: dramaSelect<ExtArgs> | null
  }



  /**
   * Model tragedy
   */

  export type AggregateTragedy = {
    _count: TragedyCountAggregateOutputType | null
    _avg: TragedyAvgAggregateOutputType | null
    _sum: TragedySumAggregateOutputType | null
    _min: TragedyMinAggregateOutputType | null
    _max: TragedyMaxAggregateOutputType | null
  }

  export type TragedyAvgAggregateOutputType = {
    id: number | null
  }

  export type TragedySumAggregateOutputType = {
    id: number | null
  }

  export type TragedyMinAggregateOutputType = {
    id: number | null
    date: Date | null
    cover: string | null
    name: string | null
    summary: string | null
    gender: string | null
    link: string | null
    link_name: string | null
  }

  export type TragedyMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    cover: string | null
    name: string | null
    summary: string | null
    gender: string | null
    link: string | null
    link_name: string | null
  }

  export type TragedyCountAggregateOutputType = {
    id: number
    date: number
    cover: number
    name: number
    summary: number
    gender: number
    link: number
    link_name: number
    _all: number
  }


  export type TragedyAvgAggregateInputType = {
    id?: true
  }

  export type TragedySumAggregateInputType = {
    id?: true
  }

  export type TragedyMinAggregateInputType = {
    id?: true
    date?: true
    cover?: true
    name?: true
    summary?: true
    gender?: true
    link?: true
    link_name?: true
  }

  export type TragedyMaxAggregateInputType = {
    id?: true
    date?: true
    cover?: true
    name?: true
    summary?: true
    gender?: true
    link?: true
    link_name?: true
  }

  export type TragedyCountAggregateInputType = {
    id?: true
    date?: true
    cover?: true
    name?: true
    summary?: true
    gender?: true
    link?: true
    link_name?: true
    _all?: true
  }

  export type TragedyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tragedy to aggregate.
     */
    where?: tragedyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tragedies to fetch.
     */
    orderBy?: tragedyOrderByWithRelationInput | tragedyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tragedyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tragedies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tragedies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tragedies
    **/
    _count?: true | TragedyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TragedyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TragedySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TragedyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TragedyMaxAggregateInputType
  }

  export type GetTragedyAggregateType<T extends TragedyAggregateArgs> = {
        [P in keyof T & keyof AggregateTragedy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTragedy[P]>
      : GetScalarType<T[P], AggregateTragedy[P]>
  }




  export type tragedyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tragedyWhereInput
    orderBy?: tragedyOrderByWithAggregationInput | tragedyOrderByWithAggregationInput[]
    by: TragedyScalarFieldEnum[] | TragedyScalarFieldEnum
    having?: tragedyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TragedyCountAggregateInputType | true
    _avg?: TragedyAvgAggregateInputType
    _sum?: TragedySumAggregateInputType
    _min?: TragedyMinAggregateInputType
    _max?: TragedyMaxAggregateInputType
  }

  export type TragedyGroupByOutputType = {
    id: number
    date: Date | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
    _count: TragedyCountAggregateOutputType | null
    _avg: TragedyAvgAggregateOutputType | null
    _sum: TragedySumAggregateOutputType | null
    _min: TragedyMinAggregateOutputType | null
    _max: TragedyMaxAggregateOutputType | null
  }

  type GetTragedyGroupByPayload<T extends tragedyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TragedyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TragedyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TragedyGroupByOutputType[P]>
            : GetScalarType<T[P], TragedyGroupByOutputType[P]>
        }
      >
    >


  export type tragedySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    cover?: boolean
    name?: boolean
    summary?: boolean
    gender?: boolean
    link?: boolean
    link_name?: boolean
  }, ExtArgs["result"]["tragedy"]>

  export type tragedySelectScalar = {
    id?: boolean
    date?: boolean
    cover?: boolean
    name?: boolean
    summary?: boolean
    gender?: boolean
    link?: boolean
    link_name?: boolean
  }


  export type $tragedyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tragedy"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date | null
      cover: string
      name: string
      summary: string
      gender: string
      link: string
      link_name: string
    }, ExtArgs["result"]["tragedy"]>
    composites: {}
  }


  type tragedyGetPayload<S extends boolean | null | undefined | tragedyDefaultArgs> = $Result.GetResult<Prisma.$tragedyPayload, S>

  type tragedyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tragedyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TragedyCountAggregateInputType | true
    }

  export interface tragedyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tragedy'], meta: { name: 'tragedy' } }
    /**
     * Find zero or one Tragedy that matches the filter.
     * @param {tragedyFindUniqueArgs} args - Arguments to find a Tragedy
     * @example
     * // Get one Tragedy
     * const tragedy = await prisma.tragedy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tragedyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tragedyFindUniqueArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tragedy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tragedyFindUniqueOrThrowArgs} args - Arguments to find a Tragedy
     * @example
     * // Get one Tragedy
     * const tragedy = await prisma.tragedy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tragedyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tragedyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tragedy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tragedyFindFirstArgs} args - Arguments to find a Tragedy
     * @example
     * // Get one Tragedy
     * const tragedy = await prisma.tragedy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tragedyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tragedyFindFirstArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tragedy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tragedyFindFirstOrThrowArgs} args - Arguments to find a Tragedy
     * @example
     * // Get one Tragedy
     * const tragedy = await prisma.tragedy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tragedyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tragedyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tragedies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tragedyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tragedies
     * const tragedies = await prisma.tragedy.findMany()
     * 
     * // Get first 10 Tragedies
     * const tragedies = await prisma.tragedy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tragedyWithIdOnly = await prisma.tragedy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tragedyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tragedyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tragedy.
     * @param {tragedyCreateArgs} args - Arguments to create a Tragedy.
     * @example
     * // Create one Tragedy
     * const Tragedy = await prisma.tragedy.create({
     *   data: {
     *     // ... data to create a Tragedy
     *   }
     * })
     * 
    **/
    create<T extends tragedyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tragedyCreateArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tragedies.
     *     @param {tragedyCreateManyArgs} args - Arguments to create many Tragedies.
     *     @example
     *     // Create many Tragedies
     *     const tragedy = await prisma.tragedy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tragedyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tragedyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tragedy.
     * @param {tragedyDeleteArgs} args - Arguments to delete one Tragedy.
     * @example
     * // Delete one Tragedy
     * const Tragedy = await prisma.tragedy.delete({
     *   where: {
     *     // ... filter to delete one Tragedy
     *   }
     * })
     * 
    **/
    delete<T extends tragedyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tragedyDeleteArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tragedy.
     * @param {tragedyUpdateArgs} args - Arguments to update one Tragedy.
     * @example
     * // Update one Tragedy
     * const tragedy = await prisma.tragedy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tragedyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tragedyUpdateArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tragedies.
     * @param {tragedyDeleteManyArgs} args - Arguments to filter Tragedies to delete.
     * @example
     * // Delete a few Tragedies
     * const { count } = await prisma.tragedy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tragedyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tragedyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tragedies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tragedyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tragedies
     * const tragedy = await prisma.tragedy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tragedyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tragedyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tragedy.
     * @param {tragedyUpsertArgs} args - Arguments to update or create a Tragedy.
     * @example
     * // Update or create a Tragedy
     * const tragedy = await prisma.tragedy.upsert({
     *   create: {
     *     // ... data to create a Tragedy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tragedy we want to update
     *   }
     * })
    **/
    upsert<T extends tragedyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tragedyUpsertArgs<ExtArgs>>
    ): Prisma__tragedyClient<$Result.GetResult<Prisma.$tragedyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tragedies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tragedyCountArgs} args - Arguments to filter Tragedies to count.
     * @example
     * // Count the number of Tragedies
     * const count = await prisma.tragedy.count({
     *   where: {
     *     // ... the filter for the Tragedies we want to count
     *   }
     * })
    **/
    count<T extends tragedyCountArgs>(
      args?: Subset<T, tragedyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TragedyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tragedy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TragedyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TragedyAggregateArgs>(args: Subset<T, TragedyAggregateArgs>): Prisma.PrismaPromise<GetTragedyAggregateType<T>>

    /**
     * Group by Tragedy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tragedyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tragedyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tragedyGroupByArgs['orderBy'] }
        : { orderBy?: tragedyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tragedyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTragedyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tragedy model
   */
  readonly fields: tragedyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tragedy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tragedyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the tragedy model
   */ 
  interface tragedyFieldRefs {
    readonly id: FieldRef<"tragedy", 'Int'>
    readonly date: FieldRef<"tragedy", 'DateTime'>
    readonly cover: FieldRef<"tragedy", 'String'>
    readonly name: FieldRef<"tragedy", 'String'>
    readonly summary: FieldRef<"tragedy", 'String'>
    readonly gender: FieldRef<"tragedy", 'String'>
    readonly link: FieldRef<"tragedy", 'String'>
    readonly link_name: FieldRef<"tragedy", 'String'>
  }
    

  // Custom InputTypes

  /**
   * tragedy findUnique
   */
  export type tragedyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * Filter, which tragedy to fetch.
     */
    where: tragedyWhereUniqueInput
  }


  /**
   * tragedy findUniqueOrThrow
   */
  export type tragedyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * Filter, which tragedy to fetch.
     */
    where: tragedyWhereUniqueInput
  }


  /**
   * tragedy findFirst
   */
  export type tragedyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * Filter, which tragedy to fetch.
     */
    where?: tragedyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tragedies to fetch.
     */
    orderBy?: tragedyOrderByWithRelationInput | tragedyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tragedies.
     */
    cursor?: tragedyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tragedies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tragedies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tragedies.
     */
    distinct?: TragedyScalarFieldEnum | TragedyScalarFieldEnum[]
  }


  /**
   * tragedy findFirstOrThrow
   */
  export type tragedyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * Filter, which tragedy to fetch.
     */
    where?: tragedyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tragedies to fetch.
     */
    orderBy?: tragedyOrderByWithRelationInput | tragedyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tragedies.
     */
    cursor?: tragedyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tragedies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tragedies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tragedies.
     */
    distinct?: TragedyScalarFieldEnum | TragedyScalarFieldEnum[]
  }


  /**
   * tragedy findMany
   */
  export type tragedyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * Filter, which tragedies to fetch.
     */
    where?: tragedyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tragedies to fetch.
     */
    orderBy?: tragedyOrderByWithRelationInput | tragedyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tragedies.
     */
    cursor?: tragedyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tragedies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tragedies.
     */
    skip?: number
    distinct?: TragedyScalarFieldEnum | TragedyScalarFieldEnum[]
  }


  /**
   * tragedy create
   */
  export type tragedyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * The data needed to create a tragedy.
     */
    data: XOR<tragedyCreateInput, tragedyUncheckedCreateInput>
  }


  /**
   * tragedy createMany
   */
  export type tragedyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tragedies.
     */
    data: tragedyCreateManyInput | tragedyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * tragedy update
   */
  export type tragedyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * The data needed to update a tragedy.
     */
    data: XOR<tragedyUpdateInput, tragedyUncheckedUpdateInput>
    /**
     * Choose, which tragedy to update.
     */
    where: tragedyWhereUniqueInput
  }


  /**
   * tragedy updateMany
   */
  export type tragedyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tragedies.
     */
    data: XOR<tragedyUpdateManyMutationInput, tragedyUncheckedUpdateManyInput>
    /**
     * Filter which tragedies to update
     */
    where?: tragedyWhereInput
  }


  /**
   * tragedy upsert
   */
  export type tragedyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * The filter to search for the tragedy to update in case it exists.
     */
    where: tragedyWhereUniqueInput
    /**
     * In case the tragedy found by the `where` argument doesn't exist, create a new tragedy with this data.
     */
    create: XOR<tragedyCreateInput, tragedyUncheckedCreateInput>
    /**
     * In case the tragedy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tragedyUpdateInput, tragedyUncheckedUpdateInput>
  }


  /**
   * tragedy delete
   */
  export type tragedyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
    /**
     * Filter which tragedy to delete.
     */
    where: tragedyWhereUniqueInput
  }


  /**
   * tragedy deleteMany
   */
  export type tragedyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tragedies to delete
     */
    where?: tragedyWhereInput
  }


  /**
   * tragedy without action
   */
  export type tragedyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tragedy
     */
    select?: tragedySelect<ExtArgs> | null
  }



  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    site: string | null
    username: string | null
    password: string | null
    note: string | null
    create_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    site: string | null
    username: string | null
    password: string | null
    note: string | null
    create_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    site: number
    username: number
    password: number
    note: number
    create_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    site?: true
    username?: true
    password?: true
    note?: true
    create_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    site?: true
    username?: true
    password?: true
    note?: true
    create_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    site?: true
    username?: true
    password?: true
    note?: true
    create_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    site: string
    username: string
    password: string
    note: string
    create_at: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    site?: boolean
    username?: boolean
    password?: boolean
    note?: boolean
    create_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    site?: boolean
    username?: boolean
    password?: boolean
    note?: boolean
    create_at?: boolean
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      site: string
      username: string
      password: string
      note: string
      create_at: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly site: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly note: FieldRef<"user", 'String'>
    readonly create_at: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GenderScalarFieldEnum: {
    id: 'id',
    cover: 'cover',
    icon: 'icon',
    name: 'name',
    desc: 'desc',
    link: 'link',
    link_name: 'link_name'
  };

  export type GenderScalarFieldEnum = (typeof GenderScalarFieldEnum)[keyof typeof GenderScalarFieldEnum]


  export const DramaScalarFieldEnum: {
    id: 'id',
    date: 'date',
    cover: 'cover',
    name: 'name',
    summary: 'summary',
    gender: 'gender',
    link: 'link',
    link_name: 'link_name'
  };

  export type DramaScalarFieldEnum = (typeof DramaScalarFieldEnum)[keyof typeof DramaScalarFieldEnum]


  export const TragedyScalarFieldEnum: {
    id: 'id',
    date: 'date',
    cover: 'cover',
    name: 'name',
    summary: 'summary',
    gender: 'gender',
    link: 'link',
    link_name: 'link_name'
  };

  export type TragedyScalarFieldEnum = (typeof TragedyScalarFieldEnum)[keyof typeof TragedyScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    site: 'site',
    username: 'username',
    password: 'password',
    note: 'note',
    create_at: 'create_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type genderWhereInput = {
    AND?: genderWhereInput | genderWhereInput[]
    OR?: genderWhereInput[]
    NOT?: genderWhereInput | genderWhereInput[]
    id?: IntFilter<"gender"> | number
    cover?: StringFilter<"gender"> | string
    icon?: StringFilter<"gender"> | string
    name?: StringFilter<"gender"> | string
    desc?: StringFilter<"gender"> | string
    link?: StringFilter<"gender"> | string
    link_name?: StringFilter<"gender"> | string
  }

  export type genderOrderByWithRelationInput = {
    id?: SortOrder
    cover?: SortOrder
    icon?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type genderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: genderWhereInput | genderWhereInput[]
    OR?: genderWhereInput[]
    NOT?: genderWhereInput | genderWhereInput[]
    cover?: StringFilter<"gender"> | string
    icon?: StringFilter<"gender"> | string
    name?: StringFilter<"gender"> | string
    desc?: StringFilter<"gender"> | string
    link?: StringFilter<"gender"> | string
    link_name?: StringFilter<"gender"> | string
  }, "id">

  export type genderOrderByWithAggregationInput = {
    id?: SortOrder
    cover?: SortOrder
    icon?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
    _count?: genderCountOrderByAggregateInput
    _avg?: genderAvgOrderByAggregateInput
    _max?: genderMaxOrderByAggregateInput
    _min?: genderMinOrderByAggregateInput
    _sum?: genderSumOrderByAggregateInput
  }

  export type genderScalarWhereWithAggregatesInput = {
    AND?: genderScalarWhereWithAggregatesInput | genderScalarWhereWithAggregatesInput[]
    OR?: genderScalarWhereWithAggregatesInput[]
    NOT?: genderScalarWhereWithAggregatesInput | genderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"gender"> | number
    cover?: StringWithAggregatesFilter<"gender"> | string
    icon?: StringWithAggregatesFilter<"gender"> | string
    name?: StringWithAggregatesFilter<"gender"> | string
    desc?: StringWithAggregatesFilter<"gender"> | string
    link?: StringWithAggregatesFilter<"gender"> | string
    link_name?: StringWithAggregatesFilter<"gender"> | string
  }

  export type dramaWhereInput = {
    AND?: dramaWhereInput | dramaWhereInput[]
    OR?: dramaWhereInput[]
    NOT?: dramaWhereInput | dramaWhereInput[]
    id?: IntFilter<"drama"> | number
    date?: DateTimeNullableFilter<"drama"> | Date | string | null
    cover?: StringFilter<"drama"> | string
    name?: StringFilter<"drama"> | string
    summary?: StringFilter<"drama"> | string
    gender?: StringFilter<"drama"> | string
    link?: StringFilter<"drama"> | string
    link_name?: StringFilter<"drama"> | string
  }

  export type dramaOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrderInput | SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type dramaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: dramaWhereInput | dramaWhereInput[]
    OR?: dramaWhereInput[]
    NOT?: dramaWhereInput | dramaWhereInput[]
    date?: DateTimeNullableFilter<"drama"> | Date | string | null
    cover?: StringFilter<"drama"> | string
    name?: StringFilter<"drama"> | string
    summary?: StringFilter<"drama"> | string
    gender?: StringFilter<"drama"> | string
    link?: StringFilter<"drama"> | string
    link_name?: StringFilter<"drama"> | string
  }, "id">

  export type dramaOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrderInput | SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
    _count?: dramaCountOrderByAggregateInput
    _avg?: dramaAvgOrderByAggregateInput
    _max?: dramaMaxOrderByAggregateInput
    _min?: dramaMinOrderByAggregateInput
    _sum?: dramaSumOrderByAggregateInput
  }

  export type dramaScalarWhereWithAggregatesInput = {
    AND?: dramaScalarWhereWithAggregatesInput | dramaScalarWhereWithAggregatesInput[]
    OR?: dramaScalarWhereWithAggregatesInput[]
    NOT?: dramaScalarWhereWithAggregatesInput | dramaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"drama"> | number
    date?: DateTimeNullableWithAggregatesFilter<"drama"> | Date | string | null
    cover?: StringWithAggregatesFilter<"drama"> | string
    name?: StringWithAggregatesFilter<"drama"> | string
    summary?: StringWithAggregatesFilter<"drama"> | string
    gender?: StringWithAggregatesFilter<"drama"> | string
    link?: StringWithAggregatesFilter<"drama"> | string
    link_name?: StringWithAggregatesFilter<"drama"> | string
  }

  export type tragedyWhereInput = {
    AND?: tragedyWhereInput | tragedyWhereInput[]
    OR?: tragedyWhereInput[]
    NOT?: tragedyWhereInput | tragedyWhereInput[]
    id?: IntFilter<"tragedy"> | number
    date?: DateTimeNullableFilter<"tragedy"> | Date | string | null
    cover?: StringFilter<"tragedy"> | string
    name?: StringFilter<"tragedy"> | string
    summary?: StringFilter<"tragedy"> | string
    gender?: StringFilter<"tragedy"> | string
    link?: StringFilter<"tragedy"> | string
    link_name?: StringFilter<"tragedy"> | string
  }

  export type tragedyOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrderInput | SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type tragedyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tragedyWhereInput | tragedyWhereInput[]
    OR?: tragedyWhereInput[]
    NOT?: tragedyWhereInput | tragedyWhereInput[]
    date?: DateTimeNullableFilter<"tragedy"> | Date | string | null
    cover?: StringFilter<"tragedy"> | string
    name?: StringFilter<"tragedy"> | string
    summary?: StringFilter<"tragedy"> | string
    gender?: StringFilter<"tragedy"> | string
    link?: StringFilter<"tragedy"> | string
    link_name?: StringFilter<"tragedy"> | string
  }, "id">

  export type tragedyOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrderInput | SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
    _count?: tragedyCountOrderByAggregateInput
    _avg?: tragedyAvgOrderByAggregateInput
    _max?: tragedyMaxOrderByAggregateInput
    _min?: tragedyMinOrderByAggregateInput
    _sum?: tragedySumOrderByAggregateInput
  }

  export type tragedyScalarWhereWithAggregatesInput = {
    AND?: tragedyScalarWhereWithAggregatesInput | tragedyScalarWhereWithAggregatesInput[]
    OR?: tragedyScalarWhereWithAggregatesInput[]
    NOT?: tragedyScalarWhereWithAggregatesInput | tragedyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tragedy"> | number
    date?: DateTimeNullableWithAggregatesFilter<"tragedy"> | Date | string | null
    cover?: StringWithAggregatesFilter<"tragedy"> | string
    name?: StringWithAggregatesFilter<"tragedy"> | string
    summary?: StringWithAggregatesFilter<"tragedy"> | string
    gender?: StringWithAggregatesFilter<"tragedy"> | string
    link?: StringWithAggregatesFilter<"tragedy"> | string
    link_name?: StringWithAggregatesFilter<"tragedy"> | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    site?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    note?: StringFilter<"user"> | string
    create_at?: DateTimeNullableFilter<"user"> | Date | string | null
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    site?: SortOrder
    username?: SortOrder
    password?: SortOrder
    note?: SortOrder
    create_at?: SortOrderInput | SortOrder
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    site?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    note?: StringFilter<"user"> | string
    create_at?: DateTimeNullableFilter<"user"> | Date | string | null
  }, "id">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    site?: SortOrder
    username?: SortOrder
    password?: SortOrder
    note?: SortOrder
    create_at?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    site?: StringWithAggregatesFilter<"user"> | string
    username?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    note?: StringWithAggregatesFilter<"user"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
  }

  export type genderCreateInput = {
    cover: string
    icon: string
    name: string
    desc: string
    link: string
    link_name: string
  }

  export type genderUncheckedCreateInput = {
    id?: number
    cover: string
    icon: string
    name: string
    desc: string
    link: string
    link_name: string
  }

  export type genderUpdateInput = {
    cover?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type genderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type genderCreateManyInput = {
    id?: number
    cover: string
    icon: string
    name: string
    desc: string
    link: string
    link_name: string
  }

  export type genderUpdateManyMutationInput = {
    cover?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type genderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type dramaCreateInput = {
    date?: Date | string | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
  }

  export type dramaUncheckedCreateInput = {
    id?: number
    date?: Date | string | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
  }

  export type dramaUpdateInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type dramaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type dramaCreateManyInput = {
    id?: number
    date?: Date | string | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
  }

  export type dramaUpdateManyMutationInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type dramaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type tragedyCreateInput = {
    date?: Date | string | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
  }

  export type tragedyUncheckedCreateInput = {
    id?: number
    date?: Date | string | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
  }

  export type tragedyUpdateInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type tragedyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type tragedyCreateManyInput = {
    id?: number
    date?: Date | string | null
    cover: string
    name: string
    summary: string
    gender: string
    link: string
    link_name: string
  }

  export type tragedyUpdateManyMutationInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type tragedyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cover?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    link_name?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    site: string
    username: string
    password: string
    note: string
    create_at?: Date | string | null
  }

  export type userUncheckedCreateInput = {
    id?: number
    site: string
    username: string
    password: string
    note: string
    create_at?: Date | string | null
  }

  export type userUpdateInput = {
    site?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userCreateManyInput = {
    id?: number
    site: string
    username: string
    password: string
    note: string
    create_at?: Date | string | null
  }

  export type userUpdateManyMutationInput = {
    site?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type genderCountOrderByAggregateInput = {
    id?: SortOrder
    cover?: SortOrder
    icon?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type genderAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type genderMaxOrderByAggregateInput = {
    id?: SortOrder
    cover?: SortOrder
    icon?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type genderMinOrderByAggregateInput = {
    id?: SortOrder
    cover?: SortOrder
    icon?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type genderSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type dramaCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type dramaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type dramaMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type dramaMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type dramaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type tragedyCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type tragedyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type tragedyMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type tragedyMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    cover?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    gender?: SortOrder
    link?: SortOrder
    link_name?: SortOrder
  }

  export type tragedySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    username?: SortOrder
    password?: SortOrder
    note?: SortOrder
    create_at?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    username?: SortOrder
    password?: SortOrder
    note?: SortOrder
    create_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    username?: SortOrder
    password?: SortOrder
    note?: SortOrder
    create_at?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use genderDefaultArgs instead
     */
    export type genderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = genderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use dramaDefaultArgs instead
     */
    export type dramaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = dramaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tragedyDefaultArgs instead
     */
    export type tragedyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tragedyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}